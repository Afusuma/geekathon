'use client';

import { useState } from 'react';
import { Download, FileText, Image, Mail, Printer } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { useAppStore } from '@/stores/app-store';
import { MARKET_CONFIG } from '@/lib/market-config';
// import type { Market, Label } from '@repo/shared';

type Market = 'US' | 'UK' | 'ES' | 'AO' | 'MO' | 'BR' | 'AE';

interface Label {
  labelId: string;
  market: Market;
  labelData: any;
  warnings?: string[];
  language?: string;
  createdAt?: string;
  generatedBy?: string;
}

interface ExportDialogProps {
  trigger?: React.ReactNode;
  label?: Label;
  labels?: Partial<Record<Market, Label | null>>;
  className?: string;
}

function exportToJson(data: any, filename: string) {
  const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

function printLabel(label: Label) {
  const printWindow = window.open('', '_blank');
  if (!printWindow) return;

  const printContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>SmartLabel - ${MARKET_CONFIG[label.market as keyof typeof MARKET_CONFIG]?.label || label.market}</title>
      <style>
        @page { size: A4; margin: 20mm; }
        body { font-family: Arial, sans-serif; line-height: 1.4; color: #000; }
        .header { border-bottom: 2px solid #333; margin-bottom: 20px; padding-bottom: 10px; }
        .section { margin-bottom: 20px; }
        .nutrition-table { border-collapse: collapse; width: 100%; }
        .nutrition-table th, .nutrition-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        .nutrition-table th { background-color: #f5f5f5; }
        .warning { background-color: #fff3cd; border: 1px solid #ffc107; padding: 10px; }
        .compliance { background-color: #d4edda; border: 1px solid #28a745; padding: 10px; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Smart Food Label</h1>
        <p><strong>Market:</strong> ${MARKET_CONFIG[label.market as keyof typeof MARKET_CONFIG]?.label || label.market}</p>
        <p><strong>Language:</strong> ${label.language?.toUpperCase() || 'N/A'}</p>
        <p><strong>Generated:</strong> ${label.createdAt ? new Date(label.createdAt).toLocaleString() : 'N/A'}</p>
      </div>

      <div class="section">
        <h2>Ingredients</h2>
        <p>${label.labelData.legalLabel.ingredients}</p>
      </div>

      <div class="section">
        <h2>Allergen Information</h2>
        <p>${label.labelData.legalLabel.allergens}</p>
      </div>

      <div class="section">
        <h2>Nutrition Information (per 100g)</h2>
        <table class="nutrition-table">
          <thead>
            <tr><th>Nutrient</th><th>Amount</th></tr>
          </thead>
          <tbody>
            ${Object.entries(label.labelData.legalLabel.nutrition)
              .map(([key, value]) => `
                <tr>
                  <td>${key.replace(/([A-Z])/g, ' $1').trim()}</td>
                  <td>${(value as any)?.per100g?.value}${(value as any)?.per100g?.unit}</td>
                </tr>
              `).join('')}
          </tbody>
        </table>
      </div>

      <div class="section">
        <h2>Marketing Information</h2>
        <p>${label.labelData.marketing.short}</p>
      </div>

      ${label.labelData.warnings.length > 0 ? `
        <div class="section warning">
          <h2>Warnings</h2>
          <ul>
            ${label.labelData.warnings.map((w: string) => `<li>${w}</li>`).join('')}
          </ul>
        </div>
      ` : ''}

      ${label.labelData.complianceNotes.length > 0 ? `
        <div class="section compliance">
          <h2>Compliance Notes</h2>
          <ul>
            ${label.labelData.complianceNotes.map((n: string) => `<li>${n}</li>`).join('')}
          </ul>
        </div>
      ` : ''}

      <div class="section">
        <small><strong>Label ID:</strong> ${label.labelId} | <strong>Generated by:</strong> ${label.generatedBy || 'N/A'}</small>
      </div>
    </body>
    </html>
  `;

  printWindow.document.write(printContent);
  printWindow.document.close();
  printWindow.print();
}

function exportToPdf(label: Label) {
  // For now, just open print dialog
  printLabel(label);
}

function shareViaEmail(label: Label) {
  const subject = `Smart Label for ${MARKET_CONFIG[label.market as keyof typeof MARKET_CONFIG]?.label || label.market} Market`;
  const body = `
I've generated a smart food label for the ${MARKET_CONFIG[label.market as keyof typeof MARKET_CONFIG]?.label || label.market} market using SmartLabel AI.

Product Details:
- Market: ${MARKET_CONFIG[label.market as keyof typeof MARKET_CONFIG]?.label || label.market}
- Language: ${label.language?.toUpperCase() || 'N/A'}
- Generated: ${label.createdAt ? new Date(label.createdAt).toLocaleString() : 'N/A'}

Ingredients: ${label.labelData.legalLabel.ingredients}

Allergens: ${label.labelData.legalLabel.allergens}

Marketing: ${label.labelData.marketing.short}

Generated with SmartLabel AI - Geekathon 2025
  `.trim();

  const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
  window.open(mailtoUrl);
}

export function ExportDialog({ trigger, label, labels, className }: ExportDialogProps) {
  const [isOpen, setIsOpen] = useState(false);
  const selectedMarkets = useAppStore(state => state.selectedMarkets);
  const appLabels = useAppStore(state => state.labels);

  // Use provided labels or get from store
  const exportLabels = labels || appLabels;
  const availableLabels = Array.isArray(exportLabels) 
    ? exportLabels.map(label => [label.market, label] as [Market, Label])
    : Object.entries(exportLabels).filter(([_, label]) => label !== null) as [Market, Label][];

  const handleExportSingle = (label: Label, format: string) => {
    switch (format) {
      case 'json':
        exportToJson(label, `smart-label-${label.market}-${label.labelId}.json`);
        break;
      case 'pdf':
        exportToPdf(label);
        break;
      case 'print':
        printLabel(label);
        break;
      case 'email':
        shareViaEmail(label);
        break;
    }
    setIsOpen(false);
  };

  const handleExportAll = (format: string) => {
    switch (format) {
      case 'json':
        exportToJson(
          {
            labels: exportLabels,
            markets: selectedMarkets,
            timestamp: new Date().toISOString(),
            generated_by: 'SmartLabel AI'
          },
          `smart-labels-comparison-${new Date().toISOString().split('T')[0]}.json`
        );
        break;
      case 'comparison':
        // Create a comparison report
        const comparisonData = {
          title: 'Multi-Market Label Comparison',
          markets: selectedMarkets.map(market => {
            const label = Array.isArray(exportLabels) 
              ? exportLabels.find(l => l.market === market)
              : exportLabels[market as keyof typeof exportLabels];
            return {
              market,
              config: MARKET_CONFIG[market as keyof typeof MARKET_CONFIG],
              label
            };
          }),
          timestamp: new Date().toISOString(),
        };
        exportToJson(comparisonData, `labels-comparison-${new Date().toISOString().split('T')[0]}.json`);
        break;
    }
    setIsOpen(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button variant="outline" size="sm">
            <Download className="w-4 h-4 mr-2" />
            Export
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Export Labels</DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          {/* Single Label Export */}
          {label && (
            <div className="space-y-3">
              <h3 className="font-medium text-sm text-gray-700">
                Export Single Label ({MARKET_CONFIG[label.market as keyof typeof MARKET_CONFIG]?.label || label.market})
              </h3>
              <div className="grid grid-cols-2 gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleExportSingle(label, 'json')}
                  className="flex items-center gap-2"
                >
                  <FileText className="w-4 h-4" />
                  JSON
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleExportSingle(label, 'pdf')}
                  className="flex items-center gap-2"
                >
                  <Image className="w-4 h-4" />
                  PDF
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleExportSingle(label, 'print')}
                  className="flex items-center gap-2"
                >
                  <Printer className="w-4 h-4" />
                  Print
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleExportSingle(label, 'email')}
                  className="flex items-center gap-2"
                >
                  <Mail className="w-4 h-4" />
                  Email
                </Button>
              </div>
            </div>
          )}

          {/* Multi-Label Export */}
          {availableLabels.length > 1 && (
            <div className="space-y-3">
              <h3 className="font-medium text-sm text-gray-700">
                Export All Labels ({availableLabels.length} markets)
              </h3>
              <div className="flex flex-wrap gap-1 mb-3">
                {availableLabels.map(([market, _]) => (
                  <Badge key={market} variant="secondary" className="text-xs">
                    {MARKET_CONFIG[market as keyof typeof MARKET_CONFIG]?.label || market}
                  </Badge>
                ))}
              </div>
              <div className="space-y-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleExportAll('json')}
                  className="w-full flex items-center gap-2"
                >
                  <FileText className="w-4 h-4" />
                  Export All as JSON
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => handleExportAll('comparison')}
                  className="w-full flex items-center gap-2"
                >
                  <Download className="w-4 h-4" />
                  Comparison Report
                </Button>
              </div>
            </div>
          )}

          {availableLabels.length === 0 && (
            <div className="text-center text-gray-500 py-8">
              <p>No labels available for export</p>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}